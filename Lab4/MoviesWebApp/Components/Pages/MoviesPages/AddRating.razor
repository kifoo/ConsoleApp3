@page "/movies/add-rating"

@inject MoviesWebApp.Components.DataBase.MoviesDB DB
@using Microsoft.EntityFrameworkCore
@using MoviesWebApp.Components.DataBase

@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<PageTitle>Add Rating</PageTitle>

<h1>Add Rating</h1>


<hr />
@if (movie is null)
{
    <p><em>Loading...</em></p>
}
else
{
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="@Rating" OnValidSubmit="AddRate" FormName="addRate" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary />
            <input type="hidden" name="RatingId" value="@Rating.Id" />
            <div class="mb-3">
                <label for="value" class="form-label">Rating:</label>
                <InputNumber id="value" @bind-Value="Rating.Value" class="form-control" />
                <ValidationMessage For="() => Rating.Value" class="text-danger" />
            </div>
            <button type="submit" class="btn btn-primary">Save</button>
        </EditForm>
    </div>
</div>
}

<div>
    <a href="/movies">Back to List</a>
</div>


@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Rating Rating { get; set; } = new();

    Rating rating;
    Movies movie;
    private string userName;

    protected override async Task OnInitializedAsync()
    {
        movie = await DB.Movies.FirstOrDefaultAsync(m => m.Id == Id);
        List<Rating> ratings = DB.Ratings.Where(r => r.MovieId == movie.Id).ToList();
        if(ratings.Where(r => r.UserId == userName).Any())
        {
            NavigationManager.NavigateTo($"ratings/edit?id={ratings.FirstOrDefault(r => r.UserId == userName).Id}");
        }
    }

    public async Task AddRate()
    {
        
        rating = new Rating();
        try
        {
            var authState = await AuthStateProvider.GetAuthenticationStateAsync();
            userName = authState.User.Identity.Name;

            rating.MovieId = Id;
            rating.UserId = userName;
            rating.Value = Rating.Value;
            DB.Ratings.Add(rating);
            await DB.SaveChangesAsync();

            List<Rating> ratings = DB.Ratings.Where(r => r.MovieId == movie.Id).ToList();
            if (ratings.Count > 0)
            {
                double totalRating = 0;
                foreach (var rating in ratings)
                {
                    totalRating += rating.Value;
                }
                movie!.Rating = Math.Round((double)totalRating / ratings.Count, 2);
            }
            DB.Attach(movie).State = EntityState.Modified;
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!MovieExists(movie!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }
        NavigationManager.NavigateTo("movies");
    }

    bool MovieExists(int id)
    {
        return DB.Movies.Any(e => e.Id == id);
    }
}
