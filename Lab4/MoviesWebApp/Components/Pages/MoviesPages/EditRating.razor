@page "/ratings/edit"

@inject MoviesWebApp.Components.DataBase.MoviesDB DB
@using Microsoft.EntityFrameworkCore
@using MoviesWebApp.Components.DataBase

@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager
@using Microsoft.AspNetCore.Authorization
@attribute [Authorize]

<PageTitle>Edit Rating</PageTitle>

<h1>Edit Rating</h1>


<hr />
@if (Rating is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="@Rating" OnValidSubmit="EditRate" FormName="editRate" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="RatingId" value="@Rating.Id" />
                <div class="mb-3">
                    <label for="value" class="form-label">Rating:</label>
                    <InputNumber id="value" @bind-Value="Rating.Value" class="form-control" />
                    <ValidationMessage For="() => Rating.Value" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/ratings">Back to List</a>
</div>


@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Rating Rating { get; set; }

    private Movies? movie;

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        string userName = authState.User.Identity!.Name!;

        Rating = await DB.Ratings.FirstOrDefaultAsync(r => r.Id == Id);

        if (Rating is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        movie = await DB.Movies.FirstOrDefaultAsync(m => m.Id == Rating!.MovieId);
    }

    public async Task EditRate()
    {
        DB.Attach(Rating!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();

            await UpdateMovieRating();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!Exists(Rating!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }
        NavigationManager.NavigateTo("ratings");
    }

    private async Task UpdateMovieRating()
    {
        List<Rating> ratings = DB.Ratings.Where(r => r.MovieId == movie!.Id).ToList();
        if (ratings.Count > 0)
        {
            double totalRating = 0;
            foreach (var rating in ratings)
            {
                totalRating += rating.Value;
            }
            movie!.Rating = Math.Round((double)totalRating / ratings.Count, 2);
        }

        DB.Attach(movie!).State = EntityState.Modified;

        await DB.SaveChangesAsync();
    }

    bool Exists(int id)
    {
        return DB.Ratings.Any(e => e.Id == id);
    }
}
