@page "/ratings/delete"
@inject MoviesRatingApp.Data.ApplicationDbContext DB
@inject NavigationManager NavigationManager

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using MoviesRatingApp.Data

@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<h3>Are you sure you want to delete this?</h3>
<div>
    <h4>Rating</h4>
    <hr />
    @if (rating is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Movie </dt>
            <dd class="col-sm-10">@movie.Title</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Value</dt>
            <dd class="col-sm-10">@rating.Value</dd>
        </dl>
        <EditForm method="post" Model="rating" OnValidSubmit="DeleteRating" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(rating is null)">Delete</button> |
            <a href="/ratings">Back to List</a>
        </EditForm>
    }
</div>

@code {
    Rating? rating;
    Movies? movie;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        rating = await DB.Ratings.FirstOrDefaultAsync(m => m.Id == Id);

        if (rating is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        movie = await DB.Movies.FirstOrDefaultAsync(m => m.Id == rating.MovieId);
    }

    public async Task DeleteRating()
    {
        DB.Ratings.Remove(rating!);
        await DB.SaveChangesAsync();

        List<Rating> ratings = await DB.Ratings.Where(m => m.MovieId == rating.MovieId).ToListAsync();
        if (ratings.Count == 0)
        {
            movie!.Rating = 0;
        }
        if (ratings.Count > 0)
        {
            double totalRating = 0;
            foreach (var rating in ratings)
            {
                totalRating += rating.Value;
            }
            movie!.Rating = Math.Round((double)totalRating / ratings.Count, 2);
        }
        DB.Attach(movie).State = EntityState.Modified;
        await DB.SaveChangesAsync();
        NavigationManager.NavigateTo("/ratings");
    }
}
