@page "/Ratings/edit"
@inject MoviesRatingApp.Data.ApplicationDbContext DB
@inject AuthenticationStateProvider AuthStateProvider
@inject NavigationManager NavigationManager

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using MoviesRatingApp.Data

@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Rating</h4>
<hr />
@if (Rating is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Rating" OnValidSubmit="UpdateRating" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Rating.Id" value="@Rating.Id" />
                <div class="mb-3">
                    <label for="value" class="form-label">Value:</label>
                    <InputNumber id="value" @bind-Value="Rating.Value" class="form-control" />
                    <ValidationMessage For="() => Rating.Value" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/ratings">Back to List</a>
</div>

@code {
    Movies? movie;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Rating? Rating { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Rating ??= await DB.Ratings.FirstOrDefaultAsync(m => m.Id == Id);

        if (Rating is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        movie = await DB.Movies.FirstOrDefaultAsync(m => m.Id == Rating!.MovieId);
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateRating()
    {
        DB.Attach(Rating!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();

            await UpdateMovieRating();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!RatingExists(Rating!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/ratings");
    }

    bool RatingExists(int id)
    {
        return DB.Ratings.Any(e => e.Id == id);
    }

    private async Task UpdateMovieRating()
    {
        List<Rating> ratings = DB.Ratings.Where(r => r.MovieId == movie!.Id).ToList();
        if (ratings.Count > 0)
        {
            double totalRating = 0;
            foreach (var rating in ratings)
            {
                totalRating += rating.Value;
            }
            movie!.Rating = Math.Round((double)totalRating / ratings.Count, 2);
        }

        DB.Attach(movie!).State = EntityState.Modified;

        await DB.SaveChangesAsync();
    }
}
