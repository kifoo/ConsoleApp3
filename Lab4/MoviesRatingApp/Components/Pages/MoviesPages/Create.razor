@page "/movies/create"
@inject MoviesRatingApp.Data.ApplicationDbContext DB
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthStateProvider

@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Authorization
@using MoviesRatingApp.Data

@rendermode InteractiveServer
@attribute [Authorize]

<PageTitle>Create</PageTitle>

<h1>Create</h1>

<h4>Movies</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <EditForm method="post" Model="Movies" OnValidSubmit="AddMovies" FormName="create" Enhance>
            <DataAnnotationsValidator />
            <ValidationSummary class="text-danger" />       
            <div class="mb-3">
                <label for="title" class="form-label">Title:</label> 
                <InputText id="title" @bind-Value="Movies.Title" class="form-control" /> 
                <ValidationMessage For="() => Movies.Title" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="genre" class="form-label">Genre:</label> 
                <InputText id="genre" @bind-Value="Movies.Genre" class="form-control" /> 
                <ValidationMessage For="() => Movies.Genre" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="year" class="form-label">Year:</label> 
                <InputNumber id="year" @bind-Value="Movies.Year" class="form-control" /> 
                <ValidationMessage For="() => Movies.Year" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="rating" class="form-label">Rating:</label> 
                <InputNumber id="rating" @bind-Value="Movies.Rating" class="form-control" /> 
                <ValidationMessage For="() => Movies.Rating" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="url" class="form-label">URL:</label> 
                <InputText id="url" @bind-Value="Movies.URL" class="form-control" /> 
                <ValidationMessage For="() => Movies.URL" class="text-danger" /> 
            </div>        
            <div class="mb-3">
                <label for="description" class="form-label">Description:</label> 
                <InputText id="description" @bind-Value="Movies.Description" class="form-control" /> 
                <ValidationMessage For="() => Movies.Description" class="text-danger" /> 
            </div>        
            <button type="submit" class="btn btn-primary">Create</button>
        </EditForm>
    </div>
</div>

<div>
    <a href="/movies">Back to List</a>
</div>

@code {

    [SupplyParameterFromForm]
    public Movies Movies { get; set; } = new();

    // To protect from overposting attacks, see https://aka.ms/RazorPagesCRUD
    public async Task AddMovies()
    {
        var authState = await AuthStateProvider.GetAuthenticationStateAsync();
        string userName = authState.User.Identity.Name;

        Movies.UserId = userName;
        Movies.Rating = Math.Round((double)Movies.Rating, 2);
        DB.Movies.Add(Movies);
        await DB.SaveChangesAsync();

        Movies = await DB.Movies.FirstOrDefaultAsync(m => m.Title == Movies.Title);

        Rating Rating = new Rating();
        Rating.MovieId = Movies.Id;
        Rating.UserId = userName;
        Rating.Value = Math.Round((double)Movies.Rating, 2);
        DB.Ratings.Add(Rating);
        await DB.SaveChangesAsync();

        NavigationManager.NavigateTo("/movies");
    }
}
